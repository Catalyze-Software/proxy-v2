type Activity = variant {
  UserActivity : principal;
  UserReferral : principal;
  UserProfileFilled : principal;
  GroupMemberCount : nat64;
};
type Address = record {
  street : text;
  country : text;
  city : text;
  postal_code : text;
  label : text;
  state_or_province : text;
  house_number : text;
  house_number_addition : text;
};
type ApiError = record {
  tag : opt text;
  info : opt vec text;
  method_name : opt text;
  message : opt text;
  timestamp : nat64;
  error_type : ApiErrorType;
};
type ApiErrorType = variant {
  Duplicate;
  SerializeError;
  DeserializeError;
  NotFound;
  ValidationError : vec ValidationResponse;
  Unsupported;
  Unauthorized;
  Unexpected;
  NotImplemented;
  BadRequest;
};
type ApplicationRole = variant {
  Blocked;
  Guest;
  Member;
  Banned;
  Admin;
  Moderator;
  Leader;
  Owner;
  Watcher;
};
type Asset = variant { Url : text; None; CanisterStorage : CanisterStorage };
type Boost = record {
  updated_at : nat64;
  subject : Subject;
  owner : principal;
  seconds : nat64;
  created_at : nat64;
  blockheight : nat64;
  notification_id : opt nat64;
};
type CanisterOutputCertifiedMessages = record {
  messages : vec CanisterOutputMessage;
  cert : blob;
  tree : blob;
  is_end_of_queue : bool;
};
type CanisterOutputMessage = record {
  key : text;
  content : blob;
  client_key : ClientKey;
};
type CanisterStorage = variant { None; Manifest : Manifest; Chunk : ChunkData };
type CanisterWsCloseArguments = record { client_key : ClientKey };
type CanisterWsGetMessagesArguments = record { nonce : nat64 };
type CanisterWsMessageArguments = record { msg : WebsocketMessage };
type CanisterWsOpenArguments = record {
  gateway_principal : principal;
  client_nonce : nat64;
};
type ChunkData = record {
  chunk_id : nat64;
  canister : principal;
  index : nat64;
};
type ClientKey = record { client_principal : principal; client_nonce : nat64 };
type DateRange = record { end_date : nat64; start_date : nat64 };
type DocumentDetails = record {
  approved_date : nat64;
  approved_version : nat64;
};
type EventFilter = variant {
  Ids : vec nat64;
  Tag : nat32;
  UpdatedOn : DateRange;
  Name : text;
  None;
  Groups : vec opt nat64;
  OptionallyInvited : principal;
  IsCanceled : bool;
  StartDate : DateRange;
  Owner : principal;
  CreatedOn : DateRange;
  EndDate : DateRange;
};
type EventNotificationType = variant {
  UserJoinEvent : record { nat64; nat64 };
  JoinEventOwnerRequestDecline : InviteAttendeeResponse;
  RemoveAttendeeByOwner : JoinedAttendeeResponse;
  EventReminder : nat64;
  JoinEventUserRequestAccept : InviteAttendeeResponse;
  RoleAssignByOwner : JoinedAttendeeResponse;
  JoinEventOwnerRequestAccept : InviteAttendeeResponse;
  JoinEventOwnerRequest : InviteAttendeeResponse;
  JoinEventUserRequest : InviteAttendeeResponse;
  JoinEventUserRequestDecline : InviteAttendeeResponse;
  UserLeaveEvent : record { nat64; nat64 };
  RemoveInviteByOwner : InviteAttendeeResponse;
};
type EventResponse = record {
  id : nat64;
  updated_on : nat64;
  banner_image : Asset;
  invite_count : nat64;
  owner : principal;
  metadata : opt text;
  date : DateRange;
  attendee_count : nat64;
  name : text;
  tags : vec nat32;
  description : text;
  created_by : principal;
  created_on : nat64;
  website : text;
  boosted : opt Boost;
  privacy : PrivacyType;
  group_id : opt nat64;
  is_canceled : record { bool; text };
  image : Asset;
  location : Location;
  is_deleted : bool;
};
type EventSort = variant {
  UpdatedOn : SortDirection;
  StartDate : SortDirection;
  CreatedOn : SortDirection;
  EndDate : SortDirection;
};
type EventWithAttendees = record {
  updated_on : nat64;
  references : References;
  owner : principal;
  metadata : Metadata;
  created_by : principal;
  created_on : nat64;
  privacy : Privacy;
  group_id : opt nat64;
  is_canceled : opt text;
  attendees : Members;
  dates : vec DateRange;
  is_deleted : bool;
};
type EventsCount = record {
  new : nat64;
  total : nat64;
  starred : nat64;
  invited : nat64;
  past : nat64;
  future : nat64;
  attending : nat64;
};
type FriendRequestResponse = record {
  id : nat64;
  to : principal;
  created_at : nat64;
  requested_by : principal;
  message : text;
};
type GatedType = variant { Neuron : vec NeuronGated; Token : vec TokenGated };
type GroupFilter = variant {
  Ids : vec nat64;
  Tag : nat32;
  UpdatedOn : DateRange;
  Name : text;
  None;
  OptionallyInvited : principal;
  Owner : principal;
  CreatedOn : DateRange;
};
type GroupNotificationType = variant {
  UserLeaveGroup : nat64;
  UserJoinGroup : nat64;
  JoinGroupUserRequest : InviteMemberResponse;
  JoinGroupUserRequestDecline : InviteMemberResponse;
  RoleAssignByOwner : JoinedMemberResponse;
  JoinGroupOwnerRequest : InviteMemberResponse;
  RemoveMemberByOwner : JoinedMemberResponse;
  GroupReminder : nat64;
  JoinGroupOwnerRequestDecline : InviteMemberResponse;
  JoinGroupUserRequestAccept : InviteMemberResponse;
  RemoveInviteByOwner : InviteMemberResponse;
  JoinGroupOwnerRequestAccept : InviteMemberResponse;
};
type GroupResponse = record {
  id : nat64;
  updated_on : nat64;
  banner_image : Asset;
  owner : principal;
  name : text;
  matrix_space_id : text;
  tags : vec nat32;
  description : text;
  created_by : principal;
  created_on : nat64;
  website : text;
  boosted : opt Boost;
  privacy : PrivacyType;
  wallets : vec record { principal; text };
  events_count : nat64;
  image : Asset;
  members_count : nat64;
  privacy_gated_type_amount : opt nat64;
  location : Location;
  roles : vec Role;
  is_deleted : bool;
};
type GroupSort = variant {
  UpdatedOn : SortDirection;
  MemberCount : SortDirection;
  Name : SortDirection;
  CreatedOn : SortDirection;
};
type GroupWithMembers = record {
  updated_on : nat64;
  references : References;
  members : Members;
  owner : principal;
  metadata : Metadata;
  matrix_space_id : text;
  created_by : principal;
  created_on : nat64;
  privacy : Privacy;
  wallets : vec record { principal; text };
  events : vec nat64;
  is_deleted : bool;
};
type GroupsCount = record {
  new : nat64;
  total : nat64;
  starred : nat64;
  invited : nat64;
  joined : nat64;
};
type HttpHeader = record { value : text; name : text };
type HttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
};
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type Invite = record {
  updated_at : nat64;
  invite_type : InviteType;
  created_at : nat64;
  notification_id : opt nat64;
};
type InviteAttendeeResponse = record {
  "principal" : principal;
  invite_type : InviteType;
  group_id : nat64;
  event_id : nat64;
};
type InviteMemberResponse = record {
  "principal" : principal;
  group_id : nat64;
  invite : opt Invite;
};
type InviteType = variant { OwnerRequest; UserRequest };
type Join = record { updated_at : nat64; created_at : nat64; roles : vec text };
type JoinedAttendeeResponse = record {
  "principal" : principal;
  group_id : nat64;
  event_id : nat64;
};
type JoinedMemberResponse = record {
  "principal" : principal;
  group_id : nat64;
  roles : vec text;
};
type Location = variant {
  None;
  Digital : text;
  Physical : PhysicalLocation;
  MultiLocation : MultiLocation;
};
type Manifest = record { entries : vec ChunkData };
type Members = record {
  special_members : vec record { principal; text };
  members : vec record { principal; Join };
  invites : vec record { principal; Invite };
  roles : vec Role;
};
type Metadata = record {
  banner_image : Asset;
  name : text;
  description : text;
  website : text;
  image : Asset;
  location : Location;
};
type MetadataValue = variant { Int : int; Nat : nat; Blob : blob; Text : text };
type MultiLocation = record { physical : PhysicalLocation; digital : text };
type MultisigNotificationType = variant {
  ProposalDecline : record { principal; nat64; nat64 };
  ProposalAccept : record { principal; nat64; nat64 };
  WhitelistNotice : record { principal; nat64 };
  ProposalStatusUpdate : record { principal; nat64; nat64 };
  NewProposal : record { principal; nat64; nat64 };
};
type NeuronGated = record {
  governance_canister : principal;
  name : text;
  description : text;
  ledger_canister : principal;
  rules : vec NeuronGatedRules;
};
type NeuronGatedRules = variant {
  IsDisolving : bool;
  MinStake : nat64;
  MinAge : nat64;
  MinDissolveDelay : nat64;
};
type Notification = record {
  updated_at : nat64;
  metadata : opt text;
  is_accepted : opt bool;
  is_actionable : bool;
  created_at : nat64;
  sender : principal;
  notification_type : NotificationType;
  processed_by : opt principal;
};
type NotificationResponse = record {
  id : opt nat64;
  user_data : opt UserNotificationData;
  notification : Notification;
};
type NotificationType = variant {
  Event : EventNotificationType;
  Relation : RelationNotificationType;
  Group : GroupNotificationType;
  Transaction : TransactionNotificationType;
  Multisig : MultisigNotificationType;
};
type PagedResponse = record {
  total : nat64;
  data : vec EventResponse;
  page : nat64;
  limit : nat64;
  number_of_pages : nat64;
};
type PagedResponse_1 = record {
  total : nat64;
  data : vec GroupResponse;
  page : nat64;
  limit : nat64;
  number_of_pages : nat64;
};
type PagedResponse_2 = record {
  total : nat64;
  data : vec ReportResponse;
  page : nat64;
  limit : nat64;
  number_of_pages : nat64;
};
type Permission = record {
  name : text;
  actions : PermissionActions;
  protected : bool;
};
type PermissionActions = record {
  edit : bool;
  read : bool;
  delete : bool;
  write : bool;
};
type PhysicalLocation = record {
  longtitude : float32;
  address : Address;
  lattitude : float32;
};
type PostEvent = record {
  banner_image : Asset;
  metadata : opt text;
  date : DateRange;
  name : text;
  tags : vec nat32;
  description : text;
  website : text;
  privacy : PrivacyType;
  group_id : opt nat64;
  image : Asset;
  location : Location;
};
type PostGroup = record {
  banner_image : Asset;
  name : text;
  matrix_space_id : text;
  tags : vec nat32;
  description : text;
  website : text;
  privacy : PrivacyType;
  image : Asset;
  privacy_gated_type_amount : opt nat64;
  location : Location;
};
type PostPermission = record { name : text; actions : PermissionActions };
type PostProfile = record {
  referrer : opt principal;
  username : text;
  display_name : text;
  extra : text;
  privacy : Privacy;
  first_name : text;
  last_name : text;
};
type PostReport = record {
  subject : Subject;
  group_id : nat64;
  message : text;
};
type PostWallet = record { "principal" : principal; provider : text };
type Privacy = record {
  privacy_type : PrivacyType;
  privacy_gated_type_amount : opt nat64;
};
type PrivacyType = variant { Gated : GatedType; Private; Public; InviteOnly };
type ProfileDocuments = record {
  terms_of_service : opt DocumentDetails;
  privacy_policy : opt DocumentDetails;
  code_of_conduct : opt DocumentDetails;
};
type ProfileMetadata = record {
  profile_image : Asset;
  banner_image : Asset;
  about : text;
  country : text;
  username : text;
  city : text;
  email : text;
  website : text;
  display_name : text;
  state_or_province : text;
  first_name : text;
  last_name : text;
  date_of_birth : nat64;
};
type ProfileReferences = record {
  referrer : opt principal;
  groups : vec nat64;
  notifications : vec record { nat64; UserNotificationData };
  starred : vec Subject;
  interests : vec nat32;
  referrals : vec record { principal; Referral };
  pinned : vec Subject;
  wallets : vec record { text; Wallet };
  events : vec nat64;
  causes : vec nat32;
  skills : vec nat32;
  relations : vec record { principal; text };
};
type ProfileResponse = record {
  updated_on : nat64;
  profile_image : Asset;
  "principal" : principal;
  banner_image : Asset;
  about : text;
  referrer : opt principal;
  country : text;
  username : text;
  starred : vec Subject;
  interests : vec nat32;
  city : text;
  created_on : nat64;
  email : text;
  website : text;
  terms_of_service : opt DocumentDetails;
  display_name : text;
  extra : opt text;
  privacy_policy : opt DocumentDetails;
  pinned : vec Subject;
  privacy : Privacy;
  wallets : vec WalletResponse;
  state_or_province : text;
  first_name : text;
  last_name : text;
  causes : vec nat32;
  code_of_conduct : opt DocumentDetails;
  date_of_birth : nat64;
  skills : vec nat32;
  application_role : ApplicationRole;
};
type ProfileWithRefs = record {
  updated_on : nat64;
  references : ProfileReferences;
  documents : ProfileDocuments;
  metadata : ProfileMetadata;
  created_on : nat64;
  extra : opt text;
  notification_id : opt nat64;
  privacy : Privacy;
  application_role : ApplicationRole;
};
type References = record { tags : vec nat32; notification_id : opt nat64 };
type Referral = record { created_at : nat64 };
type RelationNotificationType = variant {
  FriendRequest : FriendRequestResponse;
  FriendRequestDecline : FriendRequestResponse;
  FriendRemove : principal;
  FriendRequestReminder : nat64;
  BlockUser : principal;
  FriendRequestRemove : nat64;
  FriendRequestAccept : FriendRequestResponse;
};
type RelationType = variant { Blocked; Friend };
type ReportFilter = variant {
  SubjectType : SubjectType;
  None;
  GroupId : nat64;
  ReportedBy : principal;
  CreatedOn : DateRange;
  Subject : Subject;
};
type ReportResponse = record {
  id : nat64;
  subject : SubjectResponse;
  created_on : nat64;
  message : text;
  reported_by : principal;
};
type ReportSort = variant {
  SubjectType : SortDirection;
  ReportedBy : SortDirection;
  CreatedOn : SortDirection;
  Subject : SortDirection;
};
type Result = variant { Ok : principal; Err : text };
type Result_1 = variant { Ok : principal; Err : ApiError };
type Result_10 = variant { Ok : ReportResponse; Err : ApiError };
type Result_11 = variant { Ok : Role; Err : ApiError };
type Result_12 = variant { Ok : record { nat64; Topic }; Err : ApiError };
type Result_13 = variant { Ok : vec record { nat64; Topic }; Err : ApiError };
type Result_14 = variant { Ok : nat64; Err : ApiError };
type Result_15 = variant { Ok : vec JoinedAttendeeResponse; Err : ApiError };
type Result_16 = variant { Ok : vec principal; Err : ApiError };
type Result_17 = variant { Ok : vec EventResponse; Err : ApiError };
type Result_18 = variant { Ok : vec GroupResponse; Err : ApiError };
type Result_19 = variant {
  Ok : vec record { ProfileResponse; vec text };
  Err : ApiError;
};
type Result_2 = variant { Ok : bool; Err : ApiError };
type Result_20 = variant { Ok : EventsCount; Err : ApiError };
type Result_21 = variant { Ok : vec InviteAttendeeResponse; Err : ApiError };
type Result_22 = variant {
  Ok : vec record { ProfileResponse; InviteAttendeeResponse };
  Err : ApiError;
};
type Result_23 = variant { Ok : PagedResponse; Err : ApiError };
type Result_24 = variant { Ok : vec InviteMemberResponse; Err : ApiError };
type Result_25 = variant {
  Ok : vec record { InviteMemberResponse; ProfileResponse };
  Err : ApiError;
};
type Result_26 = variant { Ok : JoinedMemberResponse; Err : ApiError };
type Result_27 = variant {
  Ok : record { JoinedMemberResponse; ProfileResponse };
  Err : ApiError;
};
type Result_28 = variant { Ok : vec JoinedMemberResponse; Err : ApiError };
type Result_29 = variant {
  Ok : vec record { JoinedMemberResponse; ProfileResponse };
  Err : ApiError;
};
type Result_3 = variant {
  Ok : record { principal; vec nat64 };
  Err : ApiError;
};
type Result_30 = variant { Ok : vec Role; Err : ApiError };
type Result_31 = variant { Ok : PagedResponse_1; Err : ApiError };
type Result_32 = variant { Ok : GroupsCount; Err : ApiError };
type Result_33 = variant { Ok : vec FriendRequestResponse; Err : ApiError };
type Result_34 = variant {
  Ok : vec record { FriendRequestResponse; ProfileResponse };
  Err : ApiError;
};
type Result_35 = variant { Ok : vec text; Err : ApiError };
type Result_36 = variant { Ok : vec SubjectResponse; Err : ApiError };
type Result_37 = variant { Ok : vec ProfileResponse; Err : ApiError };
type Result_38 = variant { Ok : PagedResponse_2; Err : ApiError };
type Result_39 = variant { Ok : vec nat64; Err : ApiError };
type Result_4 = variant { Ok; Err : ApiError };
type Result_40 = variant { Ok : InviteAttendeeResponse; Err : ApiError };
type Result_41 = variant {
  Ok : vec record { nat64; UserNotificationData };
  Err : ApiError;
};
type Result_42 = variant {
  Ok : vec RewardableActivityResponse;
  Err : ApiError;
};
type Result_43 = variant { Ok; Err : text };
type Result_44 = variant { Ok : CanisterOutputCertifiedMessages; Err : text };
type Result_5 = variant { Ok : JoinedAttendeeResponse; Err : ApiError };
type Result_6 = variant { Ok : EventResponse; Err : ApiError };
type Result_7 = variant { Ok : FriendRequestResponse; Err : ApiError };
type Result_8 = variant { Ok : GroupResponse; Err : ApiError };
type Result_9 = variant { Ok : ProfileResponse; Err : ApiError };
type RewardableActivityResponse = record {
  timestamp : nat64;
  activity : Activity;
};
type Role = record {
  permissions : vec Permission;
  name : text;
  color : text;
  protected : bool;
  index : opt nat64;
};
type SortDirection = variant { Asc; Desc };
type Subject = variant {
  Event : nat64;
  Group : nat64;
  Attendee : principal;
  None;
  Member : principal;
  Profile : principal;
};
type SubjectResponse = variant {
  Event : opt record { nat64; EventWithAttendees };
  Group : opt record { nat64; GroupWithMembers };
  Attendee : opt record { principal; vec nat64 };
  None;
  Member : opt record { principal; vec nat64 };
  Profile : opt record { principal; ProfileWithRefs };
};
type SubjectType = variant { Event; Group; Attendee; None; Member; Profile };
type TokenGated = record {
  "principal" : principal;
  name : text;
  description : text;
  amount : nat64;
  standard : text;
};
type Topic = record { value : text; kind : TopicKind };
type TopicKind = variant { Tag; Skill; Category };
type TransactionCompleteData = record {
  metadata : vec record { text; MetadataValue };
  sender : principal;
  total_amount_distributed : nat;
  canister : principal;
  receiver_count : nat64;
};
type TransactionData = record {
  fee : nat;
  metadata : vec record { text; MetadataValue };
  memo : opt blob;
  sender : principal;
  canister : principal;
  amount : nat;
  block_height : nat;
  receiver : principal;
};
type TransactionNotificationType = variant {
  SingleTransaction : TransactionData;
  TransactionsComplete : TransactionCompleteData;
};
type UpdateEvent = record {
  banner_image : Asset;
  owner : principal;
  metadata : opt text;
  date : DateRange;
  name : text;
  tags : vec nat32;
  description : text;
  website : text;
  privacy : PrivacyType;
  image : Asset;
  location : Location;
};
type UpdateGroup = record {
  banner_image : Asset;
  name : text;
  tags : vec nat32;
  description : text;
  website : text;
  privacy : PrivacyType;
  image : Asset;
  privacy_gated_type_amount : opt nat64;
  location : Location;
};
type UpdateProfile = record {
  profile_image : Asset;
  banner_image : Asset;
  about : text;
  country : text;
  interests : vec nat32;
  city : text;
  email : opt text;
  website : text;
  display_name : text;
  extra : opt text;
  privacy : Privacy;
  state_or_province : text;
  first_name : text;
  last_name : text;
  causes : vec nat32;
  date_of_birth : nat64;
  skills : vec nat32;
};
type UserNotificationData = record { is_read : bool; is_sender : bool };
type ValidationResponse = record { field : text; message : text };
type WSMessage = variant {
  Error : ApiError;
  Notification : NotificationResponse;
  SendNotification : record { principal; NotificationResponse };
  UnreadCount : nat64;
};
type Wallet = record { provider : text; is_primary : bool };
type WalletResponse = record {
  provider : text;
  is_primary : bool;
  address : text;
};
type WebsocketMessage = record {
  sequence_num : nat64;
  content : blob;
  client_key : ClientKey;
  timestamp : nat64;
  is_service_message : bool;
};
service : () -> {
  __get_candid_interface_tmp_hack : () -> (text) query;
  _dev_canisters_init : () -> ();
  _dev_create_canister : (vec principal) -> (Result);
  _dev_get_boost_canister : () -> (Result_1) query;
  _dev_get_event_canister : () -> (Result_1) query;
  _dev_get_friend_request_canister : () -> (Result_1) query;
  _dev_get_global_canister : () -> (Result_1) query;
  _dev_get_group_canister : () -> (Result_1) query;
  _dev_get_history_canister : () -> (Result_1) query;
  _dev_get_notification_canister : () -> (Result_1) query;
  _dev_get_profile_canister : () -> (Result_1) query;
  _dev_get_report_canister : () -> (Result_1) query;
  _dev_get_topic_canister : () -> (Result_1) query;
  _dev_get_transaction_handler_canister : () -> (Result_1) query;
  _dev_set_boost_canister : (principal) -> (Result_1);
  _dev_set_event_canister : (principal) -> (Result_1);
  _dev_set_friend_request_canister : (principal) -> (Result_1);
  _dev_set_global_canister : (principal) -> (Result_1);
  _dev_set_group_canister : (principal) -> (Result_1);
  _dev_set_history_canister : (principal) -> (Result_1);
  _dev_set_notification_canister : (principal) -> (Result_1);
  _dev_set_profile_canister : (principal) -> (Result_1);
  _dev_set_report_canister : (principal) -> (Result_1);
  _dev_set_topic_canister : (principal) -> (Result_1);
  _dev_set_transaction_handler_canister : (principal) -> (Result_1);
  accept_friend_request : (nat64) -> (Result_2);
  accept_owner_request_event_invite : (nat64) -> (Result_3);
  accept_owner_request_group_invite : (nat64) -> (Result_4);
  accept_user_request_event_invite : (nat64, nat64, principal) -> (Result_5);
  accept_user_request_group_invite : (nat64, principal) -> (Result_4);
  add_event : (PostEvent) -> (Result_6);
  add_friend_request : (principal, text) -> (Result_7);
  add_group : (PostGroup, opt text) -> (Result_8);
  add_pinned : (Subject) -> (Result_9);
  add_profile : (PostProfile) -> (Result_9);
  add_report : (PostReport) -> (Result_10);
  add_role_to_group : (nat64, text, text, nat64) -> (Result_11);
  add_starred : (Subject) -> (Result_9);
  add_topic : (TopicKind, text) -> (Result_12);
  add_topics : (TopicKind, vec text) -> (Result_13);
  add_transaction_notification : (TransactionData) -> (bool);
  add_transactions_complete_notification : (TransactionCompleteData) -> (bool);
  add_wallet_to_group : (nat64, principal, text) -> (Result_8);
  add_wallet_to_profile : (PostWallet) -> (Result_9);
  approve_code_of_conduct : (nat64) -> (Result_2);
  approve_privacy_policy : (nat64) -> (Result_2);
  approve_terms_of_service : (nat64) -> (Result_2);
  assign_role : (nat64, text, principal) -> (Result_4);
  ban_group_member : (nat64, principal) -> (Result_4);
  block_user : (principal) -> (Result_9);
  boost : (Subject, nat64) -> (Result_14);
  cancel_event : (nat64, nat64, text) -> (Result_4);
  decline_friend_request : (nat64) -> (Result_2);
  decline_owner_request_event_invite : (nat64) -> (Result_3);
  decline_owner_request_group_invite : (nat64) -> (Result_4);
  decline_user_request_event_invite : (nat64, nat64, principal) -> (Result_5);
  decline_user_request_group_invite : (nat64, principal) -> (Result_4);
  delete_event : (nat64, nat64) -> (Result_4);
  delete_group : (nat64) -> (Result_2);
  edit_event : (nat64, nat64, UpdateEvent) -> (Result_6);
  edit_group : (nat64, UpdateGroup) -> (Result_8);
  edit_profile : (UpdateProfile) -> (Result_9);
  edit_role_permissions : (nat64, text, vec PostPermission) -> (Result_2);
  get_all_topics : (TopicKind) -> (Result_13) composite_query;
  get_attending_from_principal : (principal) -> (Result_15) composite_query;
  get_banned_group_members : (nat64) -> (Result_16) composite_query;
  get_boosted_events : () -> (Result_17) composite_query;
  get_boosted_groups : () -> (Result_18) composite_query;
  get_connected_clients : () -> (vec principal) query;
  get_e8s_per_day_boost_cost : () -> (nat64) query;
  get_event : (nat64) -> (Result_6) composite_query;
  get_event_attendees : (nat64) -> (Result_15) composite_query;
  get_event_attendees_profiles_and_roles : (nat64) -> (
      Result_19,
    ) composite_query;
  get_event_count : (opt vec nat64, opt text) -> (Result_20) composite_query;
  get_event_invites : (nat64, nat64) -> (Result_21) composite_query;
  get_event_invites_with_profiles : (nat64) -> (Result_22) composite_query;
  get_events : (nat64, nat64, EventSort, vec EventFilter) -> (
      Result_23,
    ) composite_query;
  get_group : (nat64) -> (Result_8) composite_query;
  get_group_by_name : (text) -> (Result_8) composite_query;
  get_group_invites : (nat64) -> (Result_24) composite_query;
  get_group_invites_with_profiles : (nat64) -> (Result_25) composite_query;
  get_group_member : (nat64, principal) -> (Result_26) composite_query;
  get_group_member_with_profile : (nat64, principal) -> (
      Result_27,
    ) composite_query;
  get_group_members : (nat64) -> (Result_28) composite_query;
  get_group_members_with_profiles : (nat64) -> (Result_29) composite_query;
  get_group_roles : (nat64) -> (Result_30) composite_query;
  get_groups : (nat64, nat64, vec GroupFilter, GroupSort) -> (
      Result_31,
    ) composite_query;
  get_groups_by_id : (vec nat64) -> (Result_18) composite_query;
  get_groups_count : (opt text) -> (Result_32) composite_query;
  get_history_point : () -> (Result_14) query;
  get_incoming_friend_requests : () -> (Result_33) composite_query;
  get_incoming_friend_requests_with_profile : () -> (Result_34) composite_query;
  get_member_roles : (nat64, principal) -> (Result_35) composite_query;
  get_notifications : () -> (vec NotificationResponse) composite_query;
  get_outgoing_friend_requests : () -> (Result_33) composite_query;
  get_outgoing_friend_requests_with_profile : () -> (Result_34) composite_query;
  get_pinned_by_subject_type : (SubjectType) -> (Result_36) composite_query;
  get_profile : (principal) -> (Result_9) composite_query;
  get_profiles : (vec principal) -> (Result_37) composite_query;
  get_relations : (RelationType) -> (Result_16) composite_query;
  get_relations_by_principal : (principal, RelationType) -> (
      Result_16,
    ) composite_query;
  get_relations_count : (RelationType) -> (Result_14) composite_query;
  get_relations_count_by_principal : (principal, RelationType) -> (
      Result_14,
    ) composite_query;
  get_relations_with_profiles : (RelationType) -> (Result_37) composite_query;
  get_relations_with_profiles_by_principal : (principal, RelationType) -> (
      Result_37,
    ) composite_query;
  get_remaining_boost_time_in_seconds : (Subject) -> (
      Result_14,
    ) composite_query;
  get_report : (nat64, nat64) -> (Result_10) composite_query;
  get_reports : (nat64, nat64, ReportSort, vec ReportFilter, nat64) -> (
      Result_38,
    ) composite_query;
  get_self_attendee : () -> (Result_3) composite_query;
  get_self_events : () -> (Result_17) composite_query;
  get_self_groups : () -> (Result_18) composite_query;
  get_starred_by_subject_type : (SubjectType) -> (Result_39) composite_query;
  get_topic : (nat64) -> (Result_12) composite_query;
  get_topics : (vec nat64) -> (Result_13) composite_query;
  get_unread_notifications : () -> (vec NotificationResponse) composite_query;
  get_ws_errors : () -> (vec record { nat64; text }) query;
  get_ws_url : () -> (text) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  icts_name : () -> (text) query;
  icts_version : () -> (text) query;
  invite_to_event : (nat64, nat64, principal) -> (Result_40);
  invite_to_group : (nat64, principal) -> (Result_4);
  join_event : (nat64) -> (Result_5);
  join_group : (nat64, opt text) -> (Result_26);
  leave_event : (nat64) -> (Result_4);
  leave_group : (nat64) -> (Result_4);
  mark_notifications_as_read : (vec nat64, bool) -> (Result_41);
  multisig_new_proposal_notification : (
      vec principal,
      principal,
      nat64,
      nat64,
    ) -> (bool);
  multisig_proposal_accept_notification : (
      vec principal,
      principal,
      nat64,
      nat64,
    ) -> (bool);
  multisig_proposal_decline_notification : (
      vec principal,
      principal,
      nat64,
      nat64,
    ) -> (bool);
  multisig_proposal_status_update_notification : (
      vec principal,
      principal,
      nat64,
      nat64,
    ) -> (bool);
  multisig_whitelist_notice_notification : (
      vec principal,
      principal,
      nat64,
    ) -> (bool);
  read_reward_buffer : () -> (Result_42) query;
  remove_all_notifications : () -> (vec record { nat64; UserNotificationData });
  remove_attendee_from_event : (nat64, nat64, principal) -> (Result_4);
  remove_attendee_invite_from_event : (nat64, nat64, principal) -> (Result_4);
  remove_ban_from_group_member : (nat64, principal) -> (Result_4);
  remove_event_invite : (nat64) -> (Result_4);
  remove_friend : (principal) -> (Result_9);
  remove_friend_request : (nat64) -> (Result_2);
  remove_group_role : (nat64, text) -> (Result_2);
  remove_invite : (nat64) -> (Result_4);
  remove_member_from_group : (nat64, principal) -> (Result_4);
  remove_member_invite_from_group : (nat64, principal) -> (Result_4);
  remove_member_role : (nat64, text, principal) -> (Result_4);
  remove_notifications : (vec nat64) -> (
      vec record { nat64; UserNotificationData },
    );
  remove_pinned : (Subject) -> (Result_9);
  remove_starred : (Subject) -> (Result_9);
  remove_topic : (nat64) -> (Result_2);
  remove_wallet_from_group : (nat64, principal) -> (Result_8);
  remove_wallet_from_profile : (principal) -> (Result_9);
  reward_timer_next_trigger : () -> (Result_14) query;
  set_wallet_as_primary : (principal) -> (Result_9);
  set_ws_url : (text) -> ();
  store_stats : () -> (Result_35) composite_query;
  unblock_user : (principal) -> (Result_9);
  ws_close : (CanisterWsCloseArguments) -> (Result_43);
  ws_get_messages : (CanisterWsGetMessagesArguments) -> (Result_44) query;
  ws_message : (CanisterWsMessageArguments, opt WSMessage) -> (Result_43);
  ws_open : (CanisterWsOpenArguments) -> (Result_43);
}